# Setup a cache to cache job parts between jobs to ensure faster builds
cache:
    key: "$CI_JOB_NAME"
    untracked: true
    paths:
    - $HOME/.cargo/
    - target/

# Set any required environment variables here
variables:
  RUST_BACKTRACE: "FULL"
  GIT_SUBMODULE_STRATEGY: recursive

image: rust:latest

stages:
  - install
  - test
  - deploy

install:
  stage: install
  script:
    # triggering installation
    - rustc --version

# We want to run `test` scripts sequentially, because...
# 1. in our project, Cargo needs to download a lot of packages. Downloading the same packages in
#    three parallel instance burstly often slows down the entire progress, and even somtimes
#    triggers network timeout errors.
# 2. while performing git operations, instances race to acquire a shared lock of the git
#    repository. It sometimes makes the CI fail.
check:
  stage: test
  before_script:
    - rustup component add rustfmt clippy
    - cargo install cargo-audit
    # Install dependencies to build
    # `clang` is necessary for `setjmp`
    - apt-get update -qy
    - apt-get install -y build-essential clang
  script:
    - cargo check --verbose
    - cargo fmt -- --check
    - cargo clippy -p hp-sharp -- -D warnings
    - cargo test -- --nocapture
    - cargo audit

    - cargo test --release
    - cargo build --release

pages:
  stage: deploy
  script:
    - cargo doc
    - mkdir -p public && cp -r target/doc/* public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
